# Generated by Django 2.0.1 on 2018-01-24 17:23

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DiseaseLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_agree', models.IntegerField()),
                ('count_disagree', models.IntegerField()),
                ('is_valid', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Diseases',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_name', models.CharField(max_length=250, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Property_describe', models.CharField(max_length=250)),
                ('count_editor', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Symptom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symptom_name', models.CharField(max_length=250, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_name', models.CharField(max_length=250)),
                ('user_email', models.CharField(max_length=250, unique=True)),
                ('user_organization', models.CharField(max_length=250)),
                ('user_password', models.CharField(max_length=250)),
                ('is_related', models.BooleanField()),
                ('is_doctor', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='UserLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('add_at', models.DateField()),
                ('disease_link_id', models.ManyToManyField(to='polls.DiseaseLink')),
                ('property_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Property')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.User')),
            ],
        ),
        migrations.CreateModel(
            name='Value',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_detail', models.CharField(max_length=250)),
                ('count_editor', models.IntegerField()),
                ('disease_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Diseases')),
                ('property_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Property')),
                ('symptom_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Symptom')),
            ],
        ),
        migrations.AddField(
            model_name='userlink',
            name='value_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Value'),
        ),
        migrations.AddField(
            model_name='property',
            name='symptom_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Symptom'),
        ),
        migrations.AddField(
            model_name='diseaselink',
            name='disease_id',
            field=models.ManyToManyField(to='polls.Diseases'),
        ),
        migrations.AddField(
            model_name='diseaselink',
            name='symptom_id',
            field=models.ManyToManyField(to='polls.Symptom'),
        ),
    ]
